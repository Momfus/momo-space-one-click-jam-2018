<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atributos


prueba_mostrar_informacion = false;


variabl_aux = 0; // Usado para guardar valores entre los eventos
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colocar angulo del jugador en un planeta especifico

var menu_local_actual = 6,
    mi_input_string,
    mi_input_int,
    jug_pta_id = variable_aux,
    jug_pta_num = jug_pta_id.planeta_numero;


// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
mi_input_string = get_string("&lt;&lt;MODO PRUEBA: Jugador - Angulo de jugador en planeta " + string(jug_pta_num) + "&gt;&gt;#" +
                                + "Introduce un valor entre 0 y 360# #"
                                + "Nada = angulo cero#", 
                            "");
                            
mi_input_int = metodo_prueba_recibir_input(mi_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not ( is_string(mi_input_int) ){

    if ( mi_input_int != noone ){ 

        // Se controla que el valor ingresado este en el margen señalado, sino carga el error correspondient    
        if( mi_input_int &gt; 360 or mi_input_int &lt; 0){ metodo_prueba_menu_error( 4, menu_local_actual ); }
        else{
        
            with(ob_jugador){ metodo_jugador_colocar_en_planeta(jug_pta_id, mi_input_int, mi_radio); }
            global.prueba_cartel = false;
            
        }  
    
    }
    else{ // En el caso de haber escrito "salir" o nada 
    
        with(ob_jugador){ metodo_jugador_colocar_en_planeta(jug_pta_id, 0, mi_radio); }  
        global.prueba_cartel = false;
        
    }  

}
else{ 

    metodo_prueba_menu_error( 0, menu_local_actual );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colocar jugador en un planeta específico

var menu_local_actual = 5,
    mi_input_string,
    mi_input_int,
    jug_pta = ob_jugador.mi_planeta_sobre_id.planeta_numero;


// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
mi_input_string = get_string("&lt;&lt;MODO PRUEBA: Jugador - Colocar jugador en un planeta específico &gt;&gt;#" +
                                + "Nro de planeta  actual: " + string(jug_pta) + "# #"
                                + "Introduce un valor de un planeta existente# #"
                                + "'Salir' o nada = volver al menú anterior#", 
                            "");
                            
mi_input_int = metodo_prueba_recibir_input(mi_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not ( is_string(mi_input_int) ){

    if ( mi_input_int != noone ){ 
    
        // Si el numero ingresado era de un planeta que ya se estaba, se comunica y vuelve a preguntar por el numero, sino hace el cambio. 
        if( ob_jugador.mi_planeta_sobre_id == mi_input_int){

            metodo_prueba_menu_error( 6, menu_local_actual );
        
        }
        else{
        
            var pta_id = metodo_get_planeta(mi_input_int);

            // Si el planeta existe, se pide que ingrese el angulo, sino se lanza mensaje de error
            if( pta_id != noone ){
        
                // Se verifica que el planeta obtenido sea de tipo "ob_planeta_normal" (que son los únicos que pueden ser inicial), caso contrario lanza error
                if( pta_id.object_index != ob_planeta_normal  ){
                
                    metodo_prueba_menu_error( 1, menu_local_actual );
                
                }     
                else{
                       
                    variable_aux = pta_id;
                    show_message("El jugador está sobre el planeta " + string( mi_input_int ) );
                    event_user(6);
                    
                }
                  
            
            }
            else{ metodo_prueba_menu_error( 3, menu_local_actual );  }
            
        
        }
    
    }
    else{ with(experto_prueba ){ event_user(7); } } // En el caso de haber escrito "salir" o nada

}
else{ 

    metodo_prueba_menu_error( 0, menu_local_actual );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cambiar velocidad de movimiento

var menu_local_actual = 4,
    mi_input_string,
    mi_input_int,
    jug_vel = ob_jugador.mi_vel;

// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
mi_input_string = get_string("&lt;&lt;MODO PRUEBA: Jugador - Cambiar velocidad de movimiento &gt;&gt;#" +
                                + "La velocidad actual es: " + string(jug_vel) + "# #"
                                + "Introduce un valor distinto de cero# #"
                                + "'Salir' o nada = volver al menú anterior#", 
                            "");
                            
mi_input_int = metodo_prueba_recibir_input(mi_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not ( is_string(mi_input_int) ){

    if ( mi_input_int != noone ){ 
    
        // Se controla que el valor ingresado este en el margen señalado, siso arga el error correspondient
        if( mi_input_int != 0){

            with(ob_jugador){ metodo_set_orbita_velocidad( mi_input_int ); }

            show_message("La velocidad del jugador ahora es " + string( mi_input_int ) );
            with(experto_prueba ){ event_user(7); } // Se vuelve al menú anterior          
            
        }
        else{
               
            metodo_prueba_menu_error( 5, menu_local_actual );
        }
     
    }
    else{ with(experto_prueba ){ event_user(7); } } // En el caso de haber escrito "salir" o nada

}
else{ 

    metodo_prueba_menu_error( 0, menu_local_actual );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cambiar angulo del jugador sobre planeta

var menu_local_actual = 3,
    mi_input_string,
    mi_input_int,
    jug_ang = ob_jugador.mi_planeta_ang;

// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
mi_input_string = get_string("&lt;&lt;MODO PRUEBA: Jugador - Cambiar ángulo del jugador sobre planeta &gt;&gt;#" +
                                + "El angulo del jugador sobre el planeta es: " + string(jug_ang) + "# #"
                                + "Introduce un valor entre 0 y 360# #"
                                + "'Salir' o nada = volver al menú anterior#", 
                            "");
                            
mi_input_int = metodo_prueba_recibir_input(mi_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not ( is_string(mi_input_int) ){

    if ( mi_input_int != noone ){ 
    
        // Se controla que el valor ingresado este en el margen señalado, iso arga el error correspondient
        if( mi_input_int &gt; 360 or mi_input_int &lt; 0){

            metodo_prueba_menu_error( 4, menu_local_actual );
        
        }
        else{
               
            with( ob_jugador ){ metodo_jugador_colocar_en_planeta( mi_planeta_sobre_id, mi_input_int, mi_radio); }
        
            show_message("El angulo del jugador sobre el planeta ahora es " + string( mi_input_int ) );
            with(experto_prueba ){ event_user(7); } // Se vuelve al menú anterior  
        
        }
     
    }
    else{ with(experto_prueba ){ event_user(7); } } // En el caso de haber escrito "salir" o nada

}
else{ 

    metodo_prueba_menu_error( 0, menu_local_actual );

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colocar jugador en su punto inicial del nivel

var pta_inicial = metodo_get_planeta_inicial(),
    pta_ang_inicial = experto_nivel.nivel_planeta_inicio_angulo;

with(ob_jugador){ metodo_jugador_colocar_en_planeta( pta_inicial, pta_ang_inicial, mi_radio ); }
show_message("Jugador colocado en su punto de inicio en el planeta inicial del nivel");

with(experto_prueba){ event_user(7); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activar / Desactivar movimiento del jugador

with(ob_jugador){ 

    jugador_move = !jugador_move; 
    
    if( jugador_move == true ){ show_message("Movimiento Jugador activado"); }
    else{ show_message("Movimiento Jugador desactivado"); }

}




with(experto_prueba){ event_user(7); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mostrar información visual de Jugador

prueba_mostrar_informacion = !prueba_mostrar_informacion; 


if( prueba_mostrar_informacion == true ){ show_message("Información visual Jugador activado"); }
else{ show_message("Información visual Jugador desactivado"); }

with(experto_prueba){ event_user(7); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mostrar información visual

if( prueba_mostrar_informacion == true ){

    with( ob_jugador ){
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_colour(c_fuchsia);
       
        
        draw_text( x, y - 64, "Nro Pta: " + string( mi_planeta_sobre_id.planeta_numero )
                                + "#Vel: " + string( mi_vel ) );
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
