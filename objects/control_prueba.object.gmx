<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atributos Generales y creación de los hijos

//---&gt; Atributos generales
globalvar prueba_cartel;
prueba_cartel = false;

prueba_cartel_input_string = "error";
prueba_cartel_input_int = -1;

//---&gt; Se crean todos los tipos de prueba (de esta forma se acceden rapidamente a ellos)

instance_create( 0, 0, experto_prueba_planeta );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu prueba principal


// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
prueba_input_string = get_string("&lt;&lt;Cambiar atributos&gt;&gt;#¿Qué se quiere modificar / probar / ver# #" +
                                        "1 = Planetas#" +
                                        "'Salir' o nada = volver al juego#", "");

prueba_input_int = metodo_prueba_recibir_input(prueba_input_string);

switch( prueba_input_int ){

    //Salir
    case 0:{ break; }
    
    //Planeta
    case 1:{
        
        with( experto_prueba_planeta ){ event_perform(ev_other, ev_user0); }
        
        break;
    
    }
    
    //Error
    default:{
    
        show_message("Valor ingresado no válido");
        global.prueba_cartel = false;
        break;
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var time1, time2, time3, time4, time5, delta1, delta2, delta3, delta4, delta5, n;

n = 10000;

// 1
time1 = get_timer();

for( var i = 0; i &lt; n; i++){

    with(experto_prueba_planeta){ event_perform(ev_alarm, 0); }
    

}

delta1 = get_timer() - time1;
// 2
with(experto_prueba_planeta){ p = 0; }


time2 = get_timer();

for( var i = 0; i &lt; n; i++){

    with(mi_experto_prueba_planeta){ event_perform(ev_alarm, 0); }
    

}

delta2 = get_timer() - time2;

// 3
with(experto_prueba_planeta){ p = 0; }


time3 = get_timer();

for( var i = 0; i &lt; n; i++){

    with(experto_prueba_planeta){ p++; }
    

}

delta3 = get_timer() - time3;

// 4
with(experto_prueba_planeta){ p = 0; }


time4 = get_timer();

for( var i = 0; i &lt; n; i++){

    mi_experto_prueba_planeta.p++;
    

}

delta4 = get_timer() - time4;

// 5
with(experto_prueba_planeta){ p = 0; }


time5 = get_timer();

for( var i = 0; i &lt; n; i++){

    with(experto_prueba_planeta){ p++; }
    

}

delta5 = get_timer() - time5;

//mensaje
show_message("Evento with: + " + string(delta1) + "#Evento variable: " + string(delta2) + 
"#Mod. With: " + string(delta3) + "#Mod. Punto: " + string(delta4) + "#Mod. Directo: " + string(delta5) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reiniciar juego

game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio de cartel prueba comandos

if( global.prueba_cartel == false ){

    prueba_cartel = true;
    event_perform(ev_other, ev_user0);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Salir del juego

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
