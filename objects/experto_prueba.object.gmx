<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atributos Generales y creación de los hijos

//---&gt; Atributos generales
global.prueba = 1;
global.prueba_cartel = false;


prueba_cartel_input_string = "";
prueba_cartel_input_int = -1;

prueba_cartel_numero_menu = 0; /* Señala en que menú del modo pruba se encuentra el jugador: 
                                                                                            0 = Menu principal
                                                                                            6 = Opciones Planeta
                                                                                            7 = Opciones Jugador
                                                                                                        
                                                                                                        
                            */


//---&gt; Sobre el uso de activación de pruebas
prueba_mostrar_informacion_todo = false;        
prueba_camara_lenta = false;                     
                            
//---&gt; Se crean todos los tipos de prueba (de esta forma se acceden rapidamente a ellos)

instance_create( 0, 0, prueba_planeta );
instance_create( 0, 0, prueba_jugador );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mostrar opciones Jugador

prueba_cartel_numero_menu = 7;

// Opciones de activado / desactivado necesarias para mostrar

    var jugador_info_visual,
        jugador_puede_moverse;

    //--&gt; Información visual
    if( prueba_jugador.prueba_mostrar_informacion == true ){ jugador_info_visual = "Desactivar"; }
    else{ jugador_info_visual = "Activar"; }
    
    //--&gt; Activar / desactivar movimiento del jugador
    if( ob_jugador.jugador_move == true ){ jugador_puede_moverse = "Desactivar"; }
    else{ jugador_puede_moverse = "Activar"; }
    


// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
prueba_input_string = get_string("&lt;&lt;MODO PRUEBA: Jugador&gt;&gt;#Elije una opción sobre el objeto jugador# #" +
                                        "0 = " + jugador_info_visual + " información visual#" +
                                        "1 = " + jugador_puede_moverse + " movimiento#" +
                                        "2 = Colocar jugador en su punto inicial del nivel#" +
                                        "3 = Cambiar angulo del jugador sobre planeta#" + 
                                        "4 = Cambiar velocidad de movimiento#" +
                                        "5 = Colocar en un planeta específico" +
                                        "# #'Salir' o nada = volver al menú anterior#", "");

prueba_input_int = metodo_prueba_recibir_input(prueba_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not( is_string(prueba_input_int) ){

    switch( prueba_input_int ){
    
        // Volver menú anterior
        case noone:{ event_user(0); break; }
    
        // Mostrar información visual 
        case 0:{ 
        
            with( prueba_jugador ){ event_user(0); }
            
            break; 
            
        }
        
        // Activar / desactivar movimiento 
        case 1:{ 
        
            with( prueba_jugador ){ event_user(1); }
            
            break; 
            
        }
        
        // Colocar jugador en su punto inicial del nivel
        case 2:{ 
        
            with( prueba_jugador ){ event_user(2); }
            
            break; 
            
        }
        
        // Cambiar angulo del jugador sobre planeta
        case 3:{ 
        
            with( prueba_jugador ){ event_user(3); }
            
            break; 
            
        }
        
        // Cambiar velocidad de movimiento
        case 4:{ 
        
            with( prueba_jugador ){ event_user(4); }
            
            break; 
            
        }
        
        // Colocar en un planeta específico
        case 5:{ 
        
            with( prueba_jugador ){ event_user(5); }
            
            break; 
            
        }
        
        //Eror si no se encuentra valor que coincida
        default: { metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); break; }
        
    }


}
else{ metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); } // Error
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mostrar opciones Planeta

prueba_cartel_numero_menu = 6;

// Opciones de activado / desactivado necesarias para mostrar

    var planeta_info_visual;

    //--&gt; Información visual
    if( prueba_planeta.prueba_mostrar_informacion == true ){ planeta_info_visual = "Desactivar"; }
    else{ planeta_info_visual = "Activar"; }
    


// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
prueba_input_string = get_string("&lt;&lt;MODO PRUEBA: Planeta&gt;&gt;#Elije una opción sobre los objetos Planetas# #" +
                                        "0 = " + planeta_info_visual + " información visual de todos#" +
                                        "1 = Cambiar planeta inicial#" + 
                                        "2 = Cambiar ángulo de ubicación inicial del jugador" + 
                                        "# #'Salir' o nada = volver al menú anterior#", "");

prueba_input_int = metodo_prueba_recibir_input(prueba_input_string);

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not( is_string(prueba_input_int) ){

   switch( prueba_input_int ){
    
        // Volver menú anterior
        case noone:{ event_user(0); break; }
    
        // Mostrar información visual de cada planeta
        case 0:{ 
        
            with( prueba_planeta ){ event_user(0); }
            
            break; 
            
        }
        
        // Mostrar menú "Cambar planeta inicial"
        case 1:{ 
        
            with( prueba_planeta ){ event_user(1); }
            
            break; 
            
        }
        
        //Cambiar ángulo de ubicación inicial del jugador
        case 2:{
        
            with( prueba_planeta ){ event_user(2); }
        
            break;
            
        }
        
        //Eror si no se encuentra valor que coincida
        default: { metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); break; }
        
        
        
    }

}
else{ metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); } //Error
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activar / Desactivar cámara lenta


if( prueba_camara_lenta == false ){ room_speed = 1; }
else{ room_speed = 30; }

prueba_camara_lenta = !prueba_camara_lenta;


global.prueba_cartel = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mostrar o ocultar información de objetos

var on_off = !prueba_mostrar_informacion_todo;

prueba_mostrar_informacion_todo = on_off;
    
with(prueba_planeta){ prueba_mostrar_informacion = on_off; }
with(prueba_jugador){ prueba_mostrar_informacion = on_off; }

if( on_off == true ){ show_message("Se muestra toda la infromación de todos los objetos"); }
else{ show_message("Se ha ocultado toda la infromación de todos los objetos"); }

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reiniciar room actual

metodo_reiniciar_nivel();
global.prueba_cartel = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reiniciar juego

game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Salir / cerrar juego

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu prueba principal

prueba_cartel_numero_menu = 0;

// Se verifica que información mostrar para activar o desactivar información visual general
var mostrar_info_todo = "Mostrar"
if( prueba_mostrar_informacion_todo == true ){ mostrar_info_todo = "Ocultar" }

// Se verifica que información mostrar para activar o desactivar información visual general
var camara_lenta = "Activar"
if( prueba_camara_lenta == true ){ camara_lenta = "Desactivar" }

// &lt;&lt; MENÚ PRUEBA &gt;&gt;
// Se solicita al jugador que indique que desea modificar y se decide que hacer a partir de ahí
prueba_input_string = get_string("&lt;&lt;MODO PRUEBA&gt;&gt;#¿Qué se quiere modificar / probar / ver?# #" +
                                        "0 = Cerrar Juego#" +
                                        "1 = Reiniciar Juego#" +
                                        "2 = Reiniciar Nivel#" +
                                        "3 = " + mostrar_info_todo + " información de todos los objetos#" +
                                        "4 = " + camara_lenta + " cámara lenta#" +
                                        "5 = Opciones Planetas#" +
                                        "6 = Opciones Jugador#" +
                                        "#'Salir' o nada = volver al juego#", "");

prueba_input_int = metodo_prueba_recibir_input(prueba_input_string );

// En el caso que no se devolvió la cadena "error" se elige la opción correspondiente, sino se manda el mensaje correspondiente
if not( is_string(prueba_input_int) ){

    switch( prueba_input_int ){
    
        //Volver al juego
        case noone:{ global.prueba_cartel = false; break; }
        
        //Salir del juego
        case 0:{ event_user(1); break; }
        
        //Reiniciar Juego
        case 1:{ event_user(2); break; }
        
        //Reiniciar Nivel
        case 2:{ event_user(3); break; }
        
        //Mostrar / Ocultar toda la información de los objetos
        case 3:{ event_user(4); break; }
        
        //Activar / Desactivar cámara lenta
        case 4:{ event_user(5); break; }
        
        //Opciones Planeta
        case 5:{ event_user(6); break; }
        
        //Opciones Jugador
        case 6:{ event_user(7); break; }
        
        //Eror si no se encuentra valor que coincida
        default: { metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); break; }
    
    }

}
else{ metodo_prueba_menu_error( 0, prueba_cartel_numero_menu ); } // Error
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setear valores en prueba_planeta

if( room != rm_inicial ){
    
    with( prueba_planeta ){
    
        prueba_planeta_inicial_id = metodo_get_planeta_inicial();
        prueba_planeta_inicial_nro = prueba_planeta_inicial_id.planeta_numero;
        prueba_planeta_inicial_ang_ini = experto_nivel.nivel_planeta_inicio_angulo;
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_rectangle(0, 0, 100, 100, false);

draw_set_colour(c_black);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_transformed(28, 15, "Tipo: " + string(global.prueba), 1.2, 1.2, 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio de cartel prueba comandos

if( global.prueba_cartel == false ){

    global.prueba_cartel = true;
    event_perform(ev_other, ev_user0);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.prueba = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.prueba = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
